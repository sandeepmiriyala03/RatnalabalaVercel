'use client';

import React, { useState, useEffect, useRef } from "react";
import {
  Box,
  Button,
  Card,
  CardContent,
  Container,
  Typography,
  Radio,
  RadioGroup,
  FormControlLabel,
  FormControl,
  Divider,
  Snackbar,
  Alert,
  useTheme,
} from "@mui/material";
import html2canvas from "html2canvas";

// Question type
type Question = {
  question: string;
  options: string[];
  answer: number;
};

const allQuestions: Question[] = [
  { question: "‡∞Æ‡∞ø‡∞∞‡∞ø‡∞Ø‡∞æ‡∞≤ ‡∞∞‡∞æ‡∞Æ‡∞ï‡±É‡∞∑‡±ç‡∞£ ‡∞ó‡∞æ‡∞∞‡∞ø ‡∞™‡±Å‡∞ü‡±ç‡∞ü‡∞ø‡∞® ‡∞ä‡∞∞‡±Å?", options: ["‡∞µ‡∞ø‡∞ú‡∞Ø‡∞µ‡∞æ‡∞°", "‡∞§‡±ã‡∞≤‡±á‡∞∞‡±Å", "‡∞π‡±à‡∞¶‡∞∞‡∞æ‡∞¨‡∞æ‡∞¶‡±ç", "‡∞§‡∞£‡±Å‡∞ï‡±Å"], answer: 1 },
  { question: "‡∞Æ‡∞ø‡∞∞‡∞ø‡∞Ø‡∞æ‡∞≤ ‡∞∞‡∞æ‡∞Æ‡∞ï‡±É‡∞∑‡±ç‡∞£ ‡∞ó‡∞æ‡∞∞‡∞ø ‡∞™‡±ç‡∞∞‡∞ß‡∞æ‡∞® ‡∞∏‡∞æ‡∞π‡∞ø‡∞§‡±ç‡∞Ø ‡∞™‡∞∞‡∞ø‡∞∂‡±ã‡∞ß‡∞® ‡∞é‡∞µ‡∞∞‡∞ø ‡∞Æ‡±Ä‡∞¶?", options: ["‡∞∂‡±ç‡∞∞‡±Ä‡∞∂‡±ç‡∞∞‡±Ä", "‡∞µ‡∞ø‡∞∂‡±ç‡∞µ‡∞®‡∞æ‡∞• ‡∞∏‡∞§‡±ç‡∞Ø‡∞®‡∞æ‡∞∞‡∞æ‡∞Ø‡∞£", "‡∞ö‡∞æ‡∞ó‡∞Ç‡∞ü‡∞ø", "‡∞∏‡∞ø‡∞®‡∞æ‡∞∞‡±Ü"], answer: 0 },
  { question: "‡∞µ‡∞æ‡∞∞‡±Å ‡∞é‡∞®‡±ç‡∞®‡∞ø ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞æ‡∞≤‡±Å ‡∞µ‡∞ø‡∞¶‡±ç‡∞Ø‡∞æ‡∞∂‡∞æ‡∞ñ‡∞≤‡±ã ‡∞™‡∞®‡∞ø‡∞ö‡±á‡∞∂‡∞æ‡∞∞‡±Å?", options: ["20", "15", "36", "5"], answer: 2 },
  { question: "‡∞µ‡∞æ‡∞∞‡±Å ‡∞Æ‡±ä‡∞¶‡∞ü‡∞ø ‡∞™‡±Å‡∞∏‡±ç‡∞§‡∞ï‡∞Ç ‡∞™‡±á‡∞∞‡±Å?", options: ["‡∞Æ‡±Å‡∞§‡±ç‡∞Ø‡∞æ‡∞≤‡∞ó‡±ä‡∞°‡±Å‡∞ó‡±Å", "‡∞¨‡∞æ‡∞≤‡∞æ‡∞≠‡∞ø‡∞∞‡∞æ‡∞Æ‡∞Ç", "‡∞µ‡∞ø‡∞¶‡±ç‡∞Ø‡±Å‡∞¶‡±ç‡∞µ‡±Ä‡∞£‡∞≤‡±Å", "‡∞∏‡±ç‡∞®‡±á‡∞π‡∞¶‡±á‡∞π‡∞≥‡∞ø"], answer: 1 },
  { question: "‡∞µ‡∞æ‡∞∞‡±Å ‡∞°‡∞æ‡∞ï‡±ç‡∞ü‡∞∞‡±á‡∞ü‡±ç ‡∞™‡±ä‡∞Ç‡∞¶‡∞ø‡∞® ‡∞Ö‡∞Ç‡∞∂‡∞Ç?", options: ["‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ï‡∞∞‡∞£‡∞Ç", "‡∞™‡±ç‡∞∞‡∞æ‡∞ö‡±Ä‡∞® ‡∞ï‡∞µ‡∞ø‡∞§‡±ç‡∞µ‡∞Ç", "‡∞∂‡±ç‡∞∞‡±Ä‡∞∂‡±ç‡∞∞‡±Ä ‡∞∏‡∞æ‡∞π‡∞ø‡∞§‡±ç‡∞Ø‡∞Ç", "‡∞ö‡∞∞‡∞ø‡∞§‡±ç‡∞∞"], answer: 2 },
  { question: "‡∞Æ‡∞π‡∞æ‡∞∞‡∞æ‡∞ú‡∞æ ‡∞∏‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§ ‡∞™‡∞æ‡∞†‡∞∂‡∞æ‡∞≤ ‡∞é‡∞ï‡±ç‡∞ï‡∞° ‡∞â‡∞Ç‡∞¶‡∞ø?", options: ["‡∞π‡±à‡∞¶‡∞∞‡∞æ‡∞¨‡∞æ‡∞¶‡±ç", "‡∞µ‡∞ø‡∞ú‡∞Ø‡∞®‡∞ó‡∞∞‡∞Ç", "‡∞§‡∞£‡±Å‡∞ï‡±Å", "‡∞∞‡∞æ‡∞ú‡∞Æ‡∞Ç‡∞°‡±ç‡∞∞‡∞ø"], answer: 1 },
  { question: "‡∞µ‡∞æ‡∞∞‡±Å ‡∞™‡±ç‡∞∞‡∞Æ‡±Å‡∞ñ‡∞Ç‡∞ó‡∞æ ‡∞Ö‡∞®‡±Å‡∞∏‡∞Ç‡∞ß‡∞æ‡∞®‡∞Æ‡±à‡∞® ‡∞™‡∞§‡±ç‡∞∞‡∞ø‡∞ï?", options: ["‡∞Ü‡∞Ç‡∞ß‡±ç‡∞∞‡∞≠‡±Ç‡∞Æ‡∞ø", "‡∞Ü‡∞Ç‡∞ß‡±ç‡∞∞‡∞ú‡±ç‡∞Ø‡±ã‡∞§‡∞ø", "‡∞§‡∞∞‡∞Ç‡∞ó‡∞ø‡∞£‡∞ø", "‡∞à‡∞®‡∞æ‡∞°‡±Å"], answer: 2 },
  { question: "‡∞Æ‡∞ø‡∞∞‡∞ø‡∞Ø‡∞æ‡∞≤ ‡∞∞‡∞æ‡∞Æ‡∞ï‡±É‡∞∑‡±ç‡∞£ ‡∞ó‡∞æ‡∞∞‡∞ø ‡∞∞‡∞ö‡∞®‡∞≤‡±Å ‡∞è ‡∞Ö‡∞Ç‡∞∂‡∞æ‡∞≤‡∞™‡±à ‡∞é‡∞ï‡±ç‡∞ï‡±Å‡∞µ‡∞ó‡∞æ ‡∞â‡∞Ç‡∞ü‡∞æ‡∞Ø‡∞ø?", options: ["‡∞µ‡∞ø‡∞ú‡±ç‡∞û‡∞æ‡∞®‡∞Ç", "‡∞∏‡∞æ‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§‡∞ø‡∞ï ‡∞∏‡∞Æ‡∞∏‡±ç‡∞Ø‡∞≤‡±Å", "‡∞™‡∞∞‡±ç‡∞Ø‡∞ü‡∞®‡∞≤‡±Å", "‡∞ï‡±ç‡∞∞‡±Ä‡∞°‡∞≤‡±Å"], answer: 1 },
  { question: "‡∞™‡±ç‡∞∞‡∞∏‡±ç‡∞§‡±Å‡∞§ ‡∞∏‡∞æ‡∞Æ‡∞æ‡∞ú‡∞ø‡∞ï ‡∞Ö‡∞Ç‡∞∂‡∞Ç ‡∞Ü‡∞Ø‡∞® ‡∞∞‡∞ö‡∞®‡∞≤‡±ç‡∞≤‡±ã ‡∞è‡∞¶‡∞ø?", options: ["‡∞Ö‡∞ï‡±ç‡∞∑‡∞∞‡∞æ‡∞∏‡±ç‡∞Ø‡∞§", "‡∞™‡∞∞‡±ç‡∞Ø‡∞æ‡∞µ‡∞∞‡∞£‡∞Ç", "‡∞∏‡∞Æ‡∞æ‡∞®‡∞§‡±ç‡∞µ‡∞Ç", "‡∞Ö‡∞®‡±ç‡∞®‡∞ø"], answer: 3 },
  { question: "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞≠‡∞æ‡∞∑‡∞≤‡±ã ‡∞Ü‡∞Ø‡∞® ‡∞™‡±ç‡∞∞‡∞ß‡∞æ‡∞® ‡∞™‡±Å‡∞∞‡∞∏‡±ç‡∞ï‡∞æ‡∞∞‡∞Ç ‡∞è‡∞¶‡∞ø?", options: ["‡∞ú‡∞æ‡∞§‡±Ä‡∞Ø ‡∞Ö‡∞µ‡∞æ‡∞∞‡±ç‡∞°‡±Å", "‡∞á‡∞Ç‡∞°‡∞ø‡∞™‡±Ü‡∞Ç‡∞°‡±Ü‡∞®‡±ç‡∞∏‡±ç ‡∞Ö‡∞µ‡∞æ‡∞∞‡±ç‡∞°‡±Å", "‡∞ï‡∞µ‡∞ø ‡∞™‡∞∞‡∞Æ‡∞æ‡∞£‡±Å", "‡∞Ö‡∞≠‡∞ø‡∞®‡∞Ç‡∞¶‡∞®"], answer: 0 },
  { question: "‡∞Æ‡∞ø‡∞∞‡∞ø‡∞Ø‡∞æ‡∞≤ ‡∞∞‡∞æ‡∞Æ‡∞ï‡±É‡∞∑‡±ç‡∞£ ‡∞ó‡∞æ‡∞∞‡∞ø ‡∞™‡±ç‡∞∞‡∞§‡∞ø‡∞∑‡±ç‡∞†‡∞æ‡∞§‡±ç‡∞Æ‡∞ï ‡∞™‡∞§‡±ç‡∞∞‡∞ø‡∞ï?", options: ["‡∞∏‡∞æ‡∞π‡∞ø‡∞§‡±ç‡∞Ø‡∞Ç", "‡∞∏‡∞Ç‡∞™‡∞æ‡∞¶‡∞ï ‡∞∏‡∞Ç‡∞ò‡∞Ç", "‡∞§‡∞∞‡∞Ç‡∞ó‡∞ø‡∞£‡∞ø", "‡∞µ‡±á‡∞¶‡∞æ‡∞Ç‡∞§"], answer: 2 },
  { question: "‡∞µ‡∞æ‡∞∞‡∞ø ‡∞ï‡∞µ‡∞ø‡∞§‡±ç‡∞µ‡∞Ç‡∞≤‡±ã ‡∞™‡±ç‡∞∞‡∞ß‡∞æ‡∞®‡∞Ç‡∞ó‡∞æ ‡∞™‡±Ü‡∞∞‡∞ø‡∞ó‡∞ø‡∞® ‡∞Ö‡∞Ç‡∞∂‡∞Ç?", options: ["‡∞∏‡∞æ‡∞Æ‡∞æ‡∞ú‡∞ø‡∞ï ‡∞¨‡∞æ‡∞ß‡±ç‡∞Ø‡∞§", "‡∞™‡±ç‡∞∞‡±á‡∞Æ", "‡∞™‡±ç‡∞∞‡∞ï‡±É‡∞§‡∞ø", "‡∞Ö‡∞Ç‡∞§‡∞∞‡∞Ç‡∞ó‡∞Ç"], answer: 0 },
  { question: "‡∞µ‡∞æ‡∞∞‡∞ø ‡∞Æ‡±ä‡∞¶‡∞ü‡∞ø ‡∞™‡∞æ‡∞†‡∞∂‡∞æ‡∞≤ ‡∞™‡±á‡∞∞‡±Å?", options: ["‡∞∞‡∞æ‡∞ú‡∞æ‡∞∞‡∞æ‡∞µ‡±ç ‡∞™‡∞æ‡∞†‡∞∂‡∞æ‡∞≤", "‡∞Æ‡∞π‡∞æ‡∞∞‡∞æ‡∞ú‡∞æ ‡∞™‡∞æ‡∞†‡∞∂‡∞æ‡∞≤", "‡∞Æ‡∞ø‡∞§‡±ç‡∞∞ ‡∞™‡∞æ‡∞†‡∞∂‡∞æ‡∞≤", "‡∞Ü‡∞ö‡∞æ‡∞∞‡±ç‡∞Ø ‡∞™‡∞æ‡∞†‡∞∂‡∞æ‡∞≤"], answer: 0 },
  { question: "‡∞è‡∞¶‡±à‡∞®‡∞æ ‡∞∞‡∞ö‡∞®‡∞≤‡±ã ‡∞µ‡±Ä‡∞∞‡±Å ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞Ç‡∞ö‡∞ø‡∞® ‡∞Æ‡±Å‡∞ñ‡±ç‡∞Ø‡∞Ç ‡∞™‡∞¶‡±ç‡∞ß‡∞§‡∞ø?", options: ["‡∞®‡±Ç‡∞§‡∞® ‡∞≠‡∞æ‡∞µ‡∞®", "‡∞™‡∞æ‡∞∞‡∞Ç‡∞™‡∞∞‡±ç‡∞Ø ‡∞∂‡±à‡∞≤‡∞ø", "‡∞™‡±ç‡∞∞‡∞Ø‡±ã‡∞ó‡∞æ‡∞§‡±ç‡∞Æ‡∞ï ‡∞™‡∞¶‡±ç‡∞¶‡∞§‡∞ø", "‡∞ï‡∞•‡∞æ‡∞®‡∞æ‡∞Ø‡∞ï‡±Å‡∞°‡±Å"], answer: 2 },
  { question: "‡∞µ‡∞æ‡∞∞‡∞ø ‡∞™‡±Å‡∞∏‡±ç‡∞§‡∞ï‡∞æ‡∞≤‡∞≤‡±ã ‡∞è‡∞¶‡±Ä ‡∞¨‡∞æ‡∞≤‡∞∏‡∞æ‡∞π‡∞ø‡∞§‡±ç‡∞Ø‡∞Ç ‡∞ï‡∞æ‡∞¶‡±Å?", options: ["‡∞¨‡∞æ‡∞≤‡∞æ‡∞≠‡∞ø‡∞∞‡∞æ‡∞Æ‡∞Ç", "‡∞∏‡∞æ‡∞π‡∞ø‡∞§‡±ç‡∞Ø ‡∞™‡∞¶‡∞ï‡±ã‡∞∂‡∞Ç", "‡∞∏‡±ç‡∞®‡±á‡∞π‡∞¶‡±á‡∞π‡∞≥‡∞ø", "‡∞µ‡∞ø‡∞µ‡±á‡∞ï‡∞™‡∞ü‡±ç‡∞ü‡∞£‡∞Ç"], answer: 1 },
  { question: "‡∞Æ‡∞ø‡∞∞‡∞ø‡∞Ø‡∞æ‡∞≤ ‡∞∞‡∞æ‡∞Æ‡∞ï‡±É‡∞∑‡±ç‡∞£ ‡∞ó‡∞æ‡∞∞‡±Å ‡∞é‡∞ï‡±ç‡∞ï‡±Å‡∞µ‡∞ó‡∞æ ‡∞è ‡∞≠‡∞æ‡∞∑‡∞≤‡±ã ‡∞∞‡∞ö‡∞®‡∞≤‡±Å ‡∞ö‡±á‡∞∂‡∞æ‡∞∞‡±Å?", options: ["‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å", "‡∞π‡∞ø‡∞Ç‡∞¶‡±Ä", "‡∞∏‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§‡∞Ç", "‡∞á‡∞Ç‡∞ó‡±ç‡∞≤‡±Ä‡∞∑‡±ç"], answer: 0 },
  { question: "‡∞µ‡∞æ‡∞∞‡±Å ‡∞™‡±ç‡∞∞‡∞∏‡∞ø‡∞¶‡±ç‡∞ß‡∞ø ‡∞ö‡±Ü‡∞Ç‡∞¶‡∞ø‡∞® ‡∞™‡∞æ‡∞†‡∞∂‡∞æ‡∞≤ ‡∞è‡∞¶‡∞ø?", options: ["‡∞ï‡±Ç‡∞®‡∞µ‡∞∞‡∞Ç ‡∞™‡∞æ‡∞†‡∞∂‡∞æ‡∞≤", "‡∞π‡±à‡∞¶‡∞∞‡∞æ‡∞¨‡∞æ‡∞¶‡±ç ‡∞™‡∞æ‡∞†‡∞∂‡∞æ‡∞≤", "‡∞Ö‡∞®‡∞Ç‡∞§‡∞™‡±Å‡∞∞ ‡∞™‡∞æ‡∞†‡∞∂‡∞æ‡∞≤", "‡∞§‡∞£‡±Å‡∞ï‡±Å ‡∞™‡∞æ‡∞†‡∞∂‡∞æ‡∞≤"], answer: 2 },
  { question: "‡∞Æ‡∞ø‡∞∞‡∞ø‡∞Ø‡∞æ‡∞≤ ‡∞∞‡∞æ‡∞Æ‡∞ï‡±É‡∞∑‡±ç‡∞£ ‡∞ó‡∞æ‡∞∞‡∞ø ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞ï‡±ä‡∞§‡±ç‡∞§‡∞ó‡∞æ ‡∞®‡±á‡∞∞‡±ç‡∞ö‡±Å‡∞ï‡±Å‡∞®‡±ç‡∞®‡∞¶‡∞ø ‡∞è‡∞Æ‡∞ø‡∞ü‡∞ø?", options: ["‡∞Ü‡∞Ø‡∞® ‡∞∏‡∞æ‡∞π‡∞ø‡∞§‡±ç‡∞Ø‡∞Ç", "‡∞Ü‡∞Ø‡∞® ‡∞ú‡±Ä‡∞µ‡∞ø‡∞§‡∞Ç", "‡∞Ü‡∞Ø‡∞® ‡∞™‡±Å‡∞∞‡∞∏‡±ç‡∞ï‡∞æ‡∞∞‡∞æ‡∞≤‡±Å", "‡∞™‡±à‡∞®‡∞ø‡∞µ‡∞®‡±ç‡∞®‡∞æ‡∞∞‡±Å"], answer: 3 },
  { question: "‡∞Æ‡∞ø‡∞∞‡∞ø‡∞Ø‡∞æ‡∞≤ ‡∞ó‡∞æ‡∞∞‡∞ø ‡∞∞‡∞ö‡∞®‡∞≤‡±Å ‡∞è ‡∞¶‡±á‡∞∂‡±Ä‡∞Ø ‡∞™‡∞§‡±ç‡∞∞‡∞ø‡∞ï‡∞≤‡±ã ‡∞™‡±ç‡∞∞‡∞ö‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡±ç‡∞°‡∞æ‡∞Ø‡±ç?", options: ["‡∞Ü‡∞Ç‡∞ß‡±ç‡∞∞‡∞ú‡±ç‡∞Ø‡±ã‡∞§‡∞ø", "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞ú‡∞ó‡∞§‡±ç", "‡∞à‡∞®‡∞æ‡∞°‡±Å", "‡∞Æ‡∞Ç‡∞§‡±ç‡∞∞‡∞ø‡∞Æ‡∞Ç‡∞°‡∞≤‡∞ø"], answer: 0 },
];

// Scorecard component with image download functionality
type ScorecardProps = {
  score: number;
  total: number;
  onShare: () => void;
};

function Scorecard({ score, total, onShare }: ScorecardProps) {
  const theme = useTheme();
  const ref = useRef<HTMLDivElement>(null);

  const handleDownloadImage = async () => {
    if (ref.current) {
      const canvas = await html2canvas(ref.current);
      const dataUrl = canvas.toDataURL("image/png");
      const link = document.createElement("a");
      link.href = dataUrl;
      link.download = `ratnalabala-quiz-score.png`;
      link.click();
    }
  };

  return (
    <>
      <Box
        ref={ref}
        sx={{
          maxWidth: 360,
          margin: "0 auto",
          padding: 3,
          borderRadius: 3,
          boxShadow: theme.shadows[4],
          backgroundColor: theme.palette.background.paper,
          textAlign: "center",
          fontFamily: "'Noto Sans Telugu', sans-serif",
          color: theme.palette.text.primary,
          userSelect: "none",
        }}
        id="scorecard-root"
      >

         <Box
    component="img"
    src="/Images/MiriaPen.jpg" 
    alt="‡∞°‡∞æ‡∞ï‡±ç‡∞ü‡∞∞‡±ç ‡∞Æ‡∞ø‡∞∞‡∞ø‡∞Ø‡∞æ‡∞≤ ‡∞∞‡∞æ‡∞Æ‡∞ï‡±É‡∞∑‡±ç‡∞£"
    sx={{
      width: 120,
      height: 120,
      borderRadius: "50%",
      objectFit: "cover",
      margin: "0 auto 16px",
      display: "block",
      boxShadow: theme.shadows[3],
    }}
  />
        <Typography
          variant="h6"
          sx={{ fontWeight: "bold", mb: 2, color: theme.palette.primary.main }}
        >
         ‡∞Æ‡±Ä ‡∞ï‡±ç‡∞µ‡∞ø‡∞ú‡±ç ‡∞´‡∞≤‡∞ø‡∞§‡∞Ç
        </Typography>

        <Typography variant="body1" sx={{ mb: 1 }}>
          üìÖ ‡∞§‡±á‡∞¶‡±Ä:{" "}
          {new Date().toLocaleDateString("te-IN", {
            year: "numeric",
            month: "long",
            day: "numeric",
          })}
        </Typography>

        <Box sx={{ fontSize: 40, mb: 1 }}>
          {Array.from({ length: score }).map((_, i) => (
            <span key={i} style={{ color: "#ffb400" }}>
              ‚≠ê
            </span>
          ))}
          {Array.from({ length: total - score }).map((_, i) => (
            <span key={i} style={{ color: "#ccc" }}>
              ‚≠ê
            </span>
          ))}
        </Box>

        <Typography variant="h5" sx={{ fontWeight: "bold", mb: 2 }}>
          {score} / {total}
        </Typography>

     <Typography
  variant="body2"
  sx={{
    mb: 3,
    whiteSpace: "pre-line",
    lineHeight: 1.6,
    fontWeight: "medium",
    letterSpacing: 0.3,
    color: "text.primary",
  }}
> 
  üöÄ ‡∞Ö‡∞≠‡∞ø‡∞®‡∞Ç‡∞¶‡∞®‡∞≤‡±Å! ‡∞Æ‡±Ä ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞Ç ‡∞Æ‡∞ø‡∞®‡±ç‡∞®‡∞ó‡∞æ ‡∞Æ‡±Ü‡∞∞‡∞ø‡∞∏‡∞ø‡∞™‡±ã‡∞§‡±ã‡∞Ç‡∞¶‡∞ø!

      ‡∞∞‡∞§‡±ç‡∞®‡∞æ‡∞≤‡∞¨‡∞æ‡∞≤ ‡∞™‡∞¶‡±ç‡∞Ø‡∞æ‡∞≤‡∞µ‡∞æ‡∞≤ ‡∞≠‡∞æ‡∞µ‡∞æ‡∞≤‡∞Æ‡∞æ‡∞≤

  {"\n\n"}üìö ‡∞Æ‡∞∞‡∞ø‡∞®‡±ç‡∞®‡∞ø ‡∞ï‡±ç‡∞µ‡∞ø‡∞ú‡±ç‚Äå‡∞≤‡∞§‡±ã ‡∞ï‡∞≤‡∞ø‡∞∏‡∞ø ‡∞ö‡∞¶‡∞µ‡∞Ç‡∞°‡∞ø, üëâ{" "}
  <Box
    component="span"
    sx={{ color: "primary.main", cursor: "pointer", textDecoration: "underline" }}
    onClick={() => window.open("https://ratnalabala.vercel.app/", "_blank")}
  >
    https://ratnalabala.vercel.app/
  </Box>

  {"\n\n"}‚ù§Ô∏è ‡∞Æ‡±Ä ‡∞∏‡±ç‡∞®‡±á‡∞π‡∞ø‡∞§‡±Å‡∞≤‡∞§‡±ã ‡∞à ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞™‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø!

</Typography>
      </Box>

      <Button
        variant="contained"
        color="primary"
        fullWidth
        onClick={handleDownloadImage}
        sx={{ marginTop: 2, fontWeight: "bold" }}
      >
        ‡∞∏‡±ç‡∞ï‡±ã‡∞∞‡±Å ‡∞á‡∞Æ‡±á‡∞ú‡±ç‚Äå‡∞ó‡∞æ ‡∞°‡±å‡∞®‡±ç‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞∏‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø
      </Button>

      <Button
        variant="contained"
        color="success"
        fullWidth
        sx={{ marginTop: 2, fontWeight: "bold" }}
        onClick={onShare}
      >
        ‡∞µ‡∞æ‡∞ü‡±ç‡∞∏‡∞æ‡∞™‡±ç‚Äå‡∞≤‡±ã ‡∞∑‡±á‡∞∞‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø
      </Button>
    </>
  );
}

export default function MiraQuizPage() {
  const [questions, setQuestions] = useState<Question[]>([]);
  const [answers, setAnswers] = useState<(number | null)[]>([]);
  const [showResult, setShowResult] = useState(false);
  const [score, setScore] = useState(0);
  const [snackbarOpen, setSnackbarOpen] = useState(false);

  useEffect(() => {
    const selected = getRandomQuestions(allQuestions, 5);
    setQuestions(selected);
    setAnswers(Array(5).fill(null));
  }, []);

  const handleChange = (qIdx: number, optionIdx: number) => {
    const updatedAnswers = [...answers];
    updatedAnswers[qIdx] = optionIdx;
    setAnswers(updatedAnswers);
  };

  const handleSubmit = () => {
    if (answers.includes(null)) {
      setSnackbarOpen(true);
      return;
    }
    let correct = 0;
    answers.forEach((ans, idx) => {
      if (ans === questions[idx].answer) correct++;
    });
    setScore(correct);
    setShowResult(true);
  };

  const handleReset = () => {
    const selected = getRandomQuestions(allQuestions, 5);
    setQuestions(selected);
    setAnswers(Array(5).fill(null));
    setShowResult(false);
    setScore(0);
  };

  const shareText = `

         üéâ *‡∞Æ‡∞ø‡∞∞‡∞ø‡∞Ø‡∞æ‡∞≤ ‡∞∞‡∞æ‡∞Æ‡∞ï‡±É‡∞∑‡±ç‡∞£ ‡∞ó‡∞æ‡∞∞‡∞ø ‡∞Æ‡±Ä‡∞¶  ‡∞Æ‡±Ä ‡∞ï‡±ç‡∞µ‡∞ø‡∞ú‡±ç ‡∞´‡∞≤‡∞ø‡∞§‡∞Ç* üéâ


üóìÔ∏è *‡∞§‡±á‡∞¶‡±Ä:* ${new Date().toLocaleDateString("te-IN", {
    year: "numeric",
    month: "long",
    day: "numeric",
  })}

üèÜ      *‡∞Æ‡±Ä ‡∞∏‡±ç‡∞ï‡±ã‡∞∞‡±Å:*
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
${"‚≠ê".repeat(score)}${"‚òÜ".repeat(5 - score)}  (${score} / 5)
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

üöÄ ‡∞Ö‡∞≠‡∞ø‡∞®‡∞Ç‡∞¶‡∞®‡∞≤‡±Å! ‡∞Æ‡±Ä ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞Ç ‡∞Æ‡∞ø‡∞®‡±ç‡∞®‡∞ó‡∞æ ‡∞Æ‡±Ü‡∞∞‡∞ø‡∞∏‡∞ø‡∞™‡±ã‡∞§‡±ã‡∞Ç‡∞¶‡∞ø!

üìö ‡∞Æ‡∞∞‡∞ø‡∞®‡±ç‡∞®‡∞ø ‡∞ï‡±ç‡∞µ‡∞ø‡∞ú‡±ç‚Äå‡∞≤‡∞§‡±ã ‡∞ï‡∞≤‡∞ø‡∞∏‡∞ø ‡∞ö‡∞¶‡∞µ‡∞Ç‡∞°‡∞ø,üëâ https://ratnalabala.vercel.app/

‚ù§Ô∏è ‡∞Æ‡±Ä ‡∞∏‡±ç‡∞®‡±á‡∞π‡∞ø‡∞§‡±Å‡∞≤‡∞§‡±ã ‡∞à ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞™‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø!
`;

  const handleShareWhatsApp = () => {
    const url = `https://wa.me/?text=${encodeURIComponent(shareText)}`;
    window.open(url, "_blank");
  };

  return (
    <Container maxWidth="sm" sx={{ py: 4 }}>
      {!showResult ? (
        <Card>
          <CardContent>
            <Typography variant="h4" align="center" gutterBottom fontWeight="bold">
              ‡∞Æ‡∞ø‡∞∞‡∞æ ‡∞ó‡∞æ‡∞∞‡∞ø ‡∞Æ‡±Ä‡∞¶ ‡∞ï‡±ç‡∞µ‡∞ø‡∞ú‡±ç
            </Typography>

            {questions.map((q, idx) => (
              <Box key={idx} sx={{ mb: 3 }}>
                <Typography variant="h6" sx={{ mb: 1 }}>
                  {`Q${idx + 1}. ${q.question}`}
                </Typography>
                <FormControl component="fieldset">
                  <RadioGroup
                    value={answers[idx]}
                    onChange={(_, val) => handleChange(idx, Number(val))}
                  >
                    {q.options.map((opt, i) => (
                      <FormControlLabel
                        key={i}
                        value={i}
                        control={<Radio />}
                        label={opt}
                        disabled={showResult}
                      />
                    ))}
                  </RadioGroup>
                </FormControl>
                <Divider sx={{ mt: 1 }} />
              </Box>
            ))}

            <Button
              variant="contained"
              color="primary"
              fullWidth
              disabled={answers.includes(null)}
              onClick={handleSubmit}
              sx={{ mt: 2 }}
            >
              ‡∞∏‡∞Æ‡∞∞‡±ç‡∞™‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø
            </Button>
          </CardContent>
        </Card>
      ) : (
        <Scorecard score={score} total={5} onShare={handleShareWhatsApp} />
      )}

      <Snackbar
        open={snackbarOpen}
        autoHideDuration={3000}
        onClose={() => setSnackbarOpen(false)}
        anchorOrigin={{ vertical: "bottom", horizontal: "center" }}
      >
        <Alert severity="warning" sx={{ width: "100%" }}>
          ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Ö‡∞®‡±ç‡∞®‡∞ø ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞≤‡∞ï‡±Å ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞æ‡∞≤‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø.
        </Alert>
      </Snackbar>

      {showResult && (
        <Box textAlign="center" sx={{ mt: 2 }}>
          <Button variant="outlined" onClick={handleReset}>
            ‡∞Æ‡∞≥‡±ç‡∞≤‡±Ä ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø
          </Button>
        </Box>
      )}
    </Container>
  );
}

function getRandomQuestions(allQ: Question[], n: number): Question[] {
  const shuffled = [...allQ].sort(() => 0.5 - Math.random());
  return shuffled.slice(0, n);
}
